★二分探索
最小値の最大化 →答えで二分探索　典型001


★Bit全探索を考える
小さい（N=20くらい）Bit全探索を考える 典型002
デカルト積が使える場合も https://note.nkmk.me/python-itertools-product/

★正しい括弧列()の問題は前から順番に括弧の数を数える定石あり
()をBitと見立てたりなどもできるかも
    典型90 002
    ABC 064 D

★木構造の木の直径は最短距離計算を2回行う
N頂点 N-1の辺 で連結なグラフは木構造
最短距離の最大値 ＝ 木の直径　といわれている
木の直径は O（N）で求めることができる
　①任意の頂点から各頂点の最短距離を求める
　②最も最短距離が大きかった点をuとして頂点uからの最短距離を求める
　③その時の最短距離の最大値がその木の最短距離の最大値となる
 典型90 003


★ある整数N以下の非負整数である条件に満たすものの個数
上位の桁からDPする DigitDP (桁DP)
https://torus711.hatenablog.com/entry/20150423/1429794075
abc007-d
Typical_DP-E

★多項式の演算
pynum.poly1d()　を使う
https://python.atelierkobato.com/poly1d/
ABC 245 D


★辞書順最小は前から貪欲法


★区間の総和は累積和を使う
典型010
https://qiita.com/drken/items/56a6b68edef8fc605821

★UnionFind
別々のUnionFindを使用してある2つの頂点がそれぞれ2つのUnionFindで連結しているか確認するとき
同じ連結ならばfindで同じ根の値を返すことを利用して、defalutdictなどで根の組み合わせをキーとして数える
典型012

★各頂点への最短経路はダイクストラ　
スタート地点だけでなくゴール地点も求めると見つかる解法も
典型013


★有向グラフでお互いに行き来できる頂点のグループ分けをするときは強連結成分分解をする
典型021
# https://hkawabata.github.io/technical-note/note/Algorithm/graph/scc.html
lib StronglyConnectedComponent.py

★1~Nまでの約数の数を求める
# https://maspypy.com/atcoder-%e5%8f%82%e5%8a%a0%e6%84%9f%e6%83%b3-2020-06-27abc-172#toc4
abc172d

★順列全探索
典型032
N個の並び順すべてを確かめたい場合
itertools.permutations(range(N))
O（N！）　N=10までなら耐えれる 11は怪しそう
それ以上の場合はBitDPでもよさそう→典型032でBitDPしてる
